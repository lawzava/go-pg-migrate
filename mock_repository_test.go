// Code generated by mockery. DO NOT EDIT.

package migrate

import (
	pg "github.com/go-pg/pg/v10"
	mock "github.com/stretchr/testify/mock"
)

// mockRepository is an autogenerated mock type for the repository type
type mockRepository struct {
	mock.Mock
}

// ApplyMigration provides a mock function with given fields: txFunc
func (_m *mockRepository) ApplyMigration(txFunc func(*pg.Tx) error) error {
	ret := _m.Called(txFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*pg.Tx) error) error); ok {
		r0 = rf(txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DropSchema provides a mock function with given fields: schemaName
func (_m *mockRepository) DropSchema(schemaName string) error {
	ret := _m.Called(schemaName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(schemaName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureMigrationTable provides a mock function with given fields:
func (_m *mockRepository) EnsureMigrationTable() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLatestMigrationNumber provides a mock function with given fields:
func (_m *mockRepository) GetLatestMigrationNumber() (uint, error) {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMigration provides a mock function with given fields: m
func (_m *mockRepository) InsertMigration(m *migration) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*migration) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveMigrationsAfter provides a mock function with given fields: number
func (_m *mockRepository) RemoveMigrationsAfter(number uint) error {
	ret := _m.Called(number)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(number)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
